# Copyright 2025 Andrew Vasilyev
# SPDX-License-Identifier: APACHE-2.0

version: "3"

includes:
  backend:
    taskfile: ./backend/Taskfile.yml
    dir: ./backend
  frontend:
    taskfile: ./frontend/Taskfile.yml
    dir: ./frontend
  db:
    taskfile: ./postgres/Taskfile.yml
    dir: ./postgres

vars:
  COMPOSE_FILE: docker-compose.dev.yaml
  GREEN: \033[0;32m
  RED: \033[0;31m
  YELLOW: \033[0;33m
  BLUE: \033[0;34m
  NC: \033[0m

silent: true

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list-all

  setup:
    desc: "Initial project setup (install deps and configure)"
    cmds:
      - task: tools:check
      - task: env:init
      - task: deps
      - printf "{{.GREEN}}[OK]{{.NC}} Setup complete! Run 'task dev' to start\n"

  deps:
    desc: "Install all dependencies"
    cmds:
      - task: backend:deps
      - task: frontend:deps
      - task: db:deps

  dev:
    desc: "Start development environment"
    cmds:
      - |
        [ -f .env ] || task setup
      - task: up

  up:
    desc: "Start all services"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} up -d
      - |
        printf "{{.GREEN}}[OK]{{.NC}} Services started:\n"
        echo "   Frontend:    http://localhost:3000"
        echo "   BFF API:     http://localhost:8000"
        echo "   Temporal UI: http://localhost:8088"
        echo "   PostgreSQL:  localhost:5432"

  down:
    desc: "Stop all services"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} down

  restart:
    desc: "Restart all services"
    cmds:
      - task: down
      - task: up

  logs:
    desc: "Show service logs (use -- <service> for specific service)"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} logs -f {{.CLI_ARGS}}

  ps:
    desc: "Show service status"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} ps

  status:
    desc: "Show environment status and recent logs"
    cmds:
      - echo "=== Services ==="
      - docker-compose -f {{.COMPOSE_FILE}} ps
      - echo ""
      - echo "=== Recent Logs ==="
      - docker-compose -f {{.COMPOSE_FILE}} logs --tail=20

  clean:
    desc: "Stop services and remove volumes (WARNING: destroys data)"
    prompt: "This will delete all data including database. Continue?"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} down -v
      - printf "{{.GREEN}}[OK]{{.NC}} Services stopped and data removed\n"

  clean:all:
    desc: "Clean all build artifacts and data"
    cmds:
      - task: backend:clean
      - task: frontend:clean
      - task: clean

  env:init:
    desc: "Create .env file from example"
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.example .env
          printf "{{.GREEN}}[OK]{{.NC}} Created .env file\n"
          printf "{{.YELLOW}}[WARN]{{.NC}} Review and update .env with your values\n"
        else
          printf "{{.GREEN}}[OK]{{.NC}} .env file exists\n"
        fi

  build:
    desc: "Build all Docker images"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} build

  build:backend:
    desc: "Build backend Docker images (api + worker)"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} build api worker

  build:frontend:
    desc: "Build frontend Docker image"
    cmds:
      - docker-compose -f {{.COMPOSE_FILE}} build ui

  format:
    desc: "Format all code (backend, frontend, SQL, repo)"
    cmds:
      - task: backend:format
      - task: frontend:format
      - task: db:schema:fmt
      - task: db:format
      - task: repo:format

  format:check:
    desc: "Check all code formatting"
    cmds:
      - task: frontend:format:check
      - task: db:schema:lint
      - task: db:format:check
      - task: repo:format:check

  lint:
    desc: "Lint all code (backend, frontend, SQL)"
    cmds:
      - task: backend:lint
      - task: frontend:lint
      - task: db:schema:lint
      - task: db:lint

  lint:fix:
    desc: "Lint and auto-fix all code"
    cmds:
      - task: backend:lint:fix
      - task: frontend:lint:fix
      - task: db:schema:fmt
      - task: db:lint:fix

  test:
    desc: "Run all tests"
    cmds:
      - task: backend:test
      - task: frontend:test

  test:coverage:
    desc: "Generate coverage reports for all components"
    cmds:
      - task: backend:test:coverage
      - task: frontend:test:coverage

  check:
    desc: "Run all checks (format, lint, type-check)"
    cmds:
      - task: format:check
      - task: lint
      - task: frontend:type-check

  security:
    desc: "Run all security scans"
    cmds:
      - task: backend:security
      - task: frontend:security
      - task: security:secrets

  security:secrets:
    desc: "Scan for secrets in code (gitleaks)"
    cmds:
      - |
        if ! command -v gitleaks >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} gitleaks not installed. Install with: brew install gitleaks\n"
          exit 1
        fi
        gitleaks detect --source . --verbose

  tools:check:
    desc: "Check required tools are installed"
    cmds:
      - |
        echo "Checking required tools..."
        command -v docker >/dev/null || (printf "{{.RED}}[ERROR]{{.NC}} Docker not found\n" && exit 1)
        command -v docker-compose >/dev/null || (printf "{{.RED}}[ERROR]{{.NC}} docker-compose not found\n" && exit 1)
        command -v go >/dev/null || (printf "{{.YELLOW}}[WARN]{{.NC}} Go not found\n")
        command -v node >/dev/null || (printf "{{.YELLOW}}[WARN]{{.NC}} Node.js not found\n")
        command -v pipx >/dev/null || (printf "{{.YELLOW}}[WARN]{{.NC}} pipx not found (optional)\n")
        printf "{{.GREEN}}[OK]{{.NC}} Required tools installed\n"

  tools:install:
    desc: "Install all development tools"
    cmds:
      - task: tools:install:golangci
      - task: tools:install:sqlfluff
      - task: tools:install:pre-commit

  tools:install:golangci:
    desc: "Install golangci-lint"
    cmds:
      - |
        if command -v golangci-lint >/dev/null; then
          printf "{{.GREEN}}[OK]{{.NC}} golangci-lint already installed ($(golangci-lint version))\n"
        else
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          printf "{{.GREEN}}[OK]{{.NC}} golangci-lint installed\n"
        fi

  tools:install:sqlfluff:
    desc: "Install sqlfluff for SQL linting"
    cmds:
      - |
        if ! command -v pipx >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} pipx not found. Install with: brew install pipx && pipx ensurepath\n"
          exit 1
        fi
        if command -v sqlfluff >/dev/null 2>&1; then
          printf "{{.GREEN}}[OK]{{.NC}} sqlfluff already installed ($(sqlfluff --version))\n"
        else
          echo "Installing sqlfluff with pipx..."
          pipx install sqlfluff
          printf "{{.GREEN}}[OK]{{.NC}} sqlfluff installed\n"
          echo "Note: You may need to restart your shell or run: pipx ensurepath"
        fi

  tools:install:pre-commit:
    desc: "Install pre-commit hooks"
    cmds:
      - |
        if ! command -v pre-commit >/dev/null; then
          echo "Installing pre-commit..."
          pipx install pre-commit
        fi
        echo "Installing pre-commit hooks..."
        pre-commit install --install-hooks
        pre-commit install --hook-type commit-msg
        printf "{{.GREEN}}[OK]{{.NC}} pre-commit hooks installed\n"

  temporal:ui:
    desc: "Open Temporal UI in browser"
    cmds:
      - echo "Opening http://localhost:8088"
      - open http://localhost:8088 || xdg-open http://localhost:8088 || echo "Visit http://localhost:8088"

  repo:format:
    desc: "Format repository-wide markdown, YAML, and JSON files"
    cmds:
      - |
        if ! command -v npx &> /dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} npx not found. Install Node.js first.\n"
          exit 1
        fi
        npx prettier --write "*.md" "*.{yml,yaml}" "*.json" ".github/**/*.{yml,yaml}"

  repo:format:check:
    desc: "Check repository-wide file formatting"
    cmds:
      - |
        if ! command -v npx &> /dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} npx not found. Install Node.js first.\n"
          exit 1
        fi
        npx prettier --check "*.md" "*.{yml,yaml}" "*.json" ".github/**/*.{yml,yaml}"

  pre-commit:
    desc: "Run pre-commit hooks on all files"
    cmds:
      - |
        if ! command -v pre-commit >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} pre-commit not installed. Run: task tools:install:pre-commit\n"
          exit 1
        fi
        pre-commit run --all-files

  pre-commit:update:
    desc: "Update pre-commit hooks to latest versions"
    cmds:
      - pre-commit autoupdate
