# Copyright 2025 Andrew Vasilyev
# SPDX-License-Identifier: APACHE-2.0

version: "3"

vars:
  GREEN: \033[0;32m
  RED: \033[0;31m
  YELLOW: \033[0;33m
  BLUE: \033[0;34m
  NC: \033[0m

silent: true

tasks:
  default:
    desc: "Show available backend tasks"
    cmds:
      - task --list-all

  deps:
    desc: "Install backend dependencies"
    cmds:
      - |
        if [ ! -f go.sum ]; then
          echo "Installing Go dependencies..."
          go mod download
          printf "{{.GREEN}}[OK]{{.NC}} Backend dependencies installed\n"
        else
          printf "{{.GREEN}}[OK]{{.NC}} Backend dependencies already installed\n"
        fi

  build:
    desc: "Build all backend binaries"
    cmds:
      - go build -o bin/api-server ./cmd/api-server
      - go build -o bin/gateway ./cmd/gateway
      - go build -o bin/worker ./cmd/worker
      - printf "{{.GREEN}}[OK]{{.NC}} Built bin/api-server, bin/gateway, and bin/worker\n"

  build:api-server:
    desc: "Build GraphQL API server"
    cmds:
      - go build -o bin/api-server ./cmd/api-server
      - printf "{{.GREEN}}[OK]{{.NC}} Built bin/api-server\n"

  build:gateway:
    desc: "Build REST API gateway"
    cmds:
      - go build -o bin/gateway ./cmd/gateway
      - printf "{{.GREEN}}[OK]{{.NC}} Built bin/gateway\n"

  build:worker:
    desc: "Build Temporal worker"
    cmds:
      - go build -o bin/worker ./cmd/worker
      - printf "{{.GREEN}}[OK]{{.NC}} Built bin/worker\n"

  tidy:
    desc: "Tidy backend dependencies"
    cmds:
      - go mod tidy

  db:generate:
    desc: "Generate Go code from SQL queries using sqlc"
    cmds:
      - |
        if ! command -v sqlc >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} sqlc not installed. Install: brew install sqlc or go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest\n"
          exit 1
        fi
        sqlc generate
        printf "{{.GREEN}}[OK]{{.NC}} Generated database code in internal/db/\n"

  graphql:generate:
    desc: "Generate GraphQL server code using gqlgen"
    cmds:
      - |
        if ! command -v gqlgen >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} gqlgen not installed. Install: go install github.com/99designs/gqlgen@latest\n"
          exit 1
        fi
        gqlgen generate
        printf "{{.GREEN}}[OK]{{.NC}} Generated GraphQL server code in internal/graph/\n"

  graphql:client:generate:
    desc: "Generate GraphQL client code using genqlient"
    cmds:
      - |
        go run github.com/Khan/genqlient
        printf "{{.GREEN}}[OK]{{.NC}} Generated GraphQL client code in internal/graphql/\n"

  generate:
    desc: "Generate all code (database + GraphQL server + GraphQL client)"
    cmds:
      - task: db:generate
      - task: graphql:generate
      - task: graphql:client:generate

  format:
    desc: "Format backend code"
    cmds:
      - go fmt ./...

  lint:
    desc: "Lint backend code"
    cmds:
      - |
        if ! command -v golangci-lint >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} golangci-lint not installed. Run from root: task tools:install:golangci\n"
          exit 1
        fi
        golangci-lint run ./...

  lint:fix:
    desc: "Lint and auto-fix backend code"
    cmds:
      - |
        if ! command -v golangci-lint >/dev/null; then
          printf "{{.RED}}[ERROR]{{.NC}} golangci-lint not installed. Run from root: task tools:install:golangci\n"
          exit 1
        fi
        golangci-lint run --fix ./...

  test:
    desc: "Run backend tests"
    cmds:
      - go test -v -race ./...

  test:coverage:
    desc: "Run backend tests with coverage"
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html
      - printf "{{.GREEN}}[OK]{{.NC}} Coverage report at coverage.html\n"

  shell:
    desc: "Open shell in backend container"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml exec api sh

  clean:
    desc: "Clean backend build artifacts"
    cmds:
      - rm -rf tmp/ bin/ *.log coverage.out coverage.html

  security:
    desc: "Run security scan on backend (gosec + govulncheck)"
    cmds:
      - |
        echo "Running gosec..."
        if ! command -v gosec >/dev/null; then
          echo "Installing gosec..."
          go install github.com/secureco/gosec/v2/cmd/gosec@latest
        fi
        gosec ./...
      - |
        echo "Running govulncheck..."
        if ! command -v govulncheck >/dev/null; then
          echo "Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
        govulncheck ./...
