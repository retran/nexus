// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountUsersByRole = `-- name: CountUsersByRole :one
SELECT COUNT(*) FROM users
WHERE role = $1
`

func (q *Queries) CountUsersByRole(ctx context.Context, role UserRole) (int64, error) {
	row := q.db.QueryRow(ctx, CountUsersByRole, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
  kratos_identity_id,
  email,
  name,
  picture,
  role
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, kratos_identity_id, email, name, picture, role, created_at, updated_at
`

type CreateUserParams struct {
	KratosIdentityID uuid.UUID `json:"kratos_identity_id"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.KratosIdentityID,
		arg.Email,
		arg.Name,
		arg.Picture,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const GetUser = `-- name: GetUser :one

SELECT id, kratos_identity_id, email, name, picture, role, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

// Copyright 2025 Andrew Vasilyev
// SPDX-License-Identifier: APACHE-2.0
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, kratos_identity_id, email, name, picture, role, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUserByKratosID = `-- name: GetUserByKratosID :one
SELECT id, kratos_identity_id, email, name, picture, role, created_at, updated_at FROM users
WHERE kratos_identity_id = $1 LIMIT 1
`

func (q *Queries) GetUserByKratosID(ctx context.Context, kratosIdentityID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByKratosID, kratosIdentityID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, kratos_identity_id, email, name, picture, role, created_at, updated_at FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, ListUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.KratosIdentityID,
			&i.Email,
			&i.Name,
			&i.Picture,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUsersByRole = `-- name: ListUsersByRole :many
SELECT id, kratos_identity_id, email, name, picture, role, created_at, updated_at FROM users
WHERE role = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersByRoleParams struct {
	Role   UserRole `json:"role"`
	Limit  int32    `json:"limit"`
	Offset int32    `json:"offset"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, arg ListUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, ListUsersByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.KratosIdentityID,
			&i.Email,
			&i.Name,
			&i.Picture,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET
  name = COALESCE($2, name),
  picture = COALESCE($3, picture),
  updated_at = NOW()
WHERE id = $1
RETURNING id, kratos_identity_id, email, name, picture, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID      uuid.UUID `json:"id"`
	Name    *string   `json:"name"`
	Picture *string   `json:"picture"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, UpdateUser, arg.ID, arg.Name, arg.Picture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET
  role = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, kratos_identity_id, email, name, picture, role, created_at, updated_at
`

type UpdateUserRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role UserRole  `json:"role"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, UpdateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpsertUser = `-- name: UpsertUser :one
INSERT INTO users (
  kratos_identity_id,
  email,
  name,
  picture,
  role
) VALUES (
  $1, $2, $3, $4, $5
)
ON CONFLICT (kratos_identity_id) DO UPDATE
SET
  email = EXCLUDED.email,
  name = EXCLUDED.name,
  picture = EXCLUDED.picture,
  updated_at = NOW()
RETURNING id, kratos_identity_id, email, name, picture, role, created_at, updated_at
`

type UpsertUserParams struct {
	KratosIdentityID uuid.UUID `json:"kratos_identity_id"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, UpsertUser,
		arg.KratosIdentityID,
		arg.Email,
		arg.Name,
		arg.Picture,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.KratosIdentityID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
