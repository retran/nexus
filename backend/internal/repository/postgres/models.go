// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuditEventType string

const (
	AuditEventTypeUserCreated     AuditEventType = "user_created"
	AuditEventTypeUserUpdated     AuditEventType = "user_updated"
	AuditEventTypeUserDeleted     AuditEventType = "user_deleted"
	AuditEventTypeLoginSuccess    AuditEventType = "login_success"
	AuditEventTypeLoginFailed     AuditEventType = "login_failed"
	AuditEventTypeLogout          AuditEventType = "logout"
	AuditEventTypeSettingsUpdated AuditEventType = "settings_updated"
	AuditEventTypeRoleChanged     AuditEventType = "role_changed"
)

func (e *AuditEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditEventType(s)
	case string:
		*e = AuditEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditEventType: %T", src)
	}
	return nil
}

type NullAuditEventType struct {
	AuditEventType AuditEventType `json:"audit_event_type"`
	Valid          bool           `json:"valid"` // Valid is true if AuditEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditEventType) Scan(value interface{}) error {
	if value == nil {
		ns.AuditEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditEventType), nil
}

func (e AuditEventType) Valid() bool {
	switch e {
	case AuditEventTypeUserCreated,
		AuditEventTypeUserUpdated,
		AuditEventTypeUserDeleted,
		AuditEventTypeLoginSuccess,
		AuditEventTypeLoginFailed,
		AuditEventTypeLogout,
		AuditEventTypeSettingsUpdated,
		AuditEventTypeRoleChanged:
		return true
	}
	return false
}

func AllAuditEventTypeValues() []AuditEventType {
	return []AuditEventType{
		AuditEventTypeUserCreated,
		AuditEventTypeUserUpdated,
		AuditEventTypeUserDeleted,
		AuditEventTypeLoginSuccess,
		AuditEventTypeLoginFailed,
		AuditEventTypeLogout,
		AuditEventTypeSettingsUpdated,
		AuditEventTypeRoleChanged,
	}
}

type UserRole string

const (
	UserRoleNone   UserRole = "none"
	UserRoleMember UserRole = "member"
	UserRoleAdmin  UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

func (e UserRole) Valid() bool {
	switch e {
	case UserRoleNone,
		UserRoleMember,
		UserRoleAdmin:
		return true
	}
	return false
}

func AllUserRoleValues() []UserRole {
	return []UserRole{
		UserRoleNone,
		UserRoleMember,
		UserRoleAdmin,
	}
}

// Audit trail for user actions and security events
type AuditLog struct {
	ID        uuid.UUID      `json:"id"`
	UserID    pgtype.UUID    `json:"user_id"`
	EventType AuditEventType `json:"event_type"`
	IpAddress *string        `json:"ip_address"`
	UserAgent *string        `json:"user_agent"`
	Metadata  []byte         `json:"metadata"`
	CreatedAt time.Time      `json:"created_at"`
}

// Rate limiting data for API throttling
type RateLimit struct {
	// Rate limit key, e.g., 'ip:192.168.1.1:endpoint:/api/users'
	Key      string    `json:"key"`
	Attempts int32     `json:"attempts"`
	ResetAt  time.Time `json:"reset_at"`
}

// Nexus users - cached from Kratos for performance
type User struct {
	ID uuid.UUID `json:"id"`
	// Reference to Kratos identity (ory schema: identities.id)
	KratosIdentityID uuid.UUID `json:"kratos_identity_id"`
	// Cached from Kratos traits.email
	Email string `json:"email"`
	// Display name cached from Kratos traits.name
	Name *string `json:"name"`
	// Profile picture URL cached from Kratos traits.picture
	Picture *string `json:"picture"`
	// User role: none (pending approval), member, admin. Cached from Kratos traits.role
	Role      UserRole  `json:"role"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
