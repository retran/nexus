// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit_logs.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CountAuditLogs = `-- name: CountAuditLogs :one
SELECT COUNT(*) FROM audit_logs
WHERE ($1::uuid IS NULL OR user_id = $1)
  AND ($2::text IS NULL OR event_type = $2::audit_event_type)
`

type CountAuditLogsParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	EventType *string     `json:"event_type"`
}

func (q *Queries) CountAuditLogs(ctx context.Context, arg CountAuditLogsParams) (int64, error) {
	row := q.db.QueryRow(ctx, CountAuditLogs, arg.UserID, arg.EventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id,
    event_type,
    ip_address,
    user_agent,
    metadata
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, event_type, ip_address, user_agent, metadata, created_at
`

type CreateAuditLogParams struct {
	UserID    pgtype.UUID    `json:"user_id"`
	EventType AuditEventType `json:"event_type"`
	IpAddress *string        `json:"ip_address"`
	UserAgent *string        `json:"user_agent"`
	Metadata  []byte         `json:"metadata"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, CreateAuditLog,
		arg.UserID,
		arg.EventType,
		arg.IpAddress,
		arg.UserAgent,
		arg.Metadata,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const GetAuditLogByID = `-- name: GetAuditLogByID :one
SELECT id, user_id, event_type, ip_address, user_agent, metadata, created_at FROM audit_logs
WHERE id = $1
`

func (q *Queries) GetAuditLogByID(ctx context.Context, id uuid.UUID) (AuditLog, error) {
	row := q.db.QueryRow(ctx, GetAuditLogByID, id)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const ListAuditLogs = `-- name: ListAuditLogs :many
SELECT id, user_id, event_type, ip_address, user_agent, metadata, created_at FROM audit_logs
WHERE ($3::uuid IS NULL OR user_id = $3)
  AND ($4::text IS NULL OR event_type = $4::audit_event_type)
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAuditLogsParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	UserID    pgtype.UUID `json:"user_id"`
	EventType *string     `json:"event_type"`
}

func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, ListAuditLogs,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.EventType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
