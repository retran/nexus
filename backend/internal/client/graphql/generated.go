// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

type AuditEventType string

const (
	AuditEventTypeUserCreated     AuditEventType = "USER_CREATED"
	AuditEventTypeUserUpdated     AuditEventType = "USER_UPDATED"
	AuditEventTypeUserDeleted     AuditEventType = "USER_DELETED"
	AuditEventTypeLoginSuccess    AuditEventType = "LOGIN_SUCCESS"
	AuditEventTypeLoginFailed     AuditEventType = "LOGIN_FAILED"
	AuditEventTypeLogout          AuditEventType = "LOGOUT"
	AuditEventTypeSettingsUpdated AuditEventType = "SETTINGS_UPDATED"
	AuditEventTypeRoleChanged     AuditEventType = "ROLE_CHANGED"
)

var AllAuditEventType = []AuditEventType{
	AuditEventTypeUserCreated,
	AuditEventTypeUserUpdated,
	AuditEventTypeUserDeleted,
	AuditEventTypeLoginSuccess,
	AuditEventTypeLoginFailed,
	AuditEventTypeLogout,
	AuditEventTypeSettingsUpdated,
	AuditEventTypeRoleChanged,
}

// CountUsersByRoleResponse is returned by CountUsersByRole on success.
type CountUsersByRoleResponse struct {
	CountUsersByRole int `json:"countUsersByRole"`
}

// GetCountUsersByRole returns CountUsersByRoleResponse.CountUsersByRole, and is useful for accessing the field via an interface.
func (v *CountUsersByRoleResponse) GetCountUsersByRole() int { return v.CountUsersByRole }

// CountUsersResponse is returned by CountUsers on success.
type CountUsersResponse struct {
	CountUsers int `json:"countUsers"`
}

// GetCountUsers returns CountUsersResponse.CountUsers, and is useful for accessing the field via an interface.
func (v *CountUsersResponse) GetCountUsers() int { return v.CountUsers }

// CreateAuditLogCreateAuditLog includes the requested fields of the GraphQL type AuditLog.
type CreateAuditLogCreateAuditLog struct {
	Id        uuid.UUID      `json:"id"`
	UserId    *uuid.UUID     `json:"userId"`
	EventType AuditEventType `json:"eventType"`
	IpAddress *string        `json:"ipAddress"`
	UserAgent *string        `json:"userAgent"`
	Metadata  *string        `json:"metadata"`
	CreatedAt time.Time      `json:"createdAt"`
}

// GetId returns CreateAuditLogCreateAuditLog.Id, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetId() uuid.UUID { return v.Id }

// GetUserId returns CreateAuditLogCreateAuditLog.UserId, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetUserId() *uuid.UUID { return v.UserId }

// GetEventType returns CreateAuditLogCreateAuditLog.EventType, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetEventType() AuditEventType { return v.EventType }

// GetIpAddress returns CreateAuditLogCreateAuditLog.IpAddress, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetIpAddress() *string { return v.IpAddress }

// GetUserAgent returns CreateAuditLogCreateAuditLog.UserAgent, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetUserAgent() *string { return v.UserAgent }

// GetMetadata returns CreateAuditLogCreateAuditLog.Metadata, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetMetadata() *string { return v.Metadata }

// GetCreatedAt returns CreateAuditLogCreateAuditLog.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateAuditLogCreateAuditLog) GetCreatedAt() time.Time { return v.CreatedAt }

type CreateAuditLogInput struct {
	UserId    *uuid.UUID     `json:"userId"`
	EventType AuditEventType `json:"eventType"`
	IpAddress *string        `json:"ipAddress"`
	UserAgent *string        `json:"userAgent"`
	Metadata  *string        `json:"metadata"`
}

// GetUserId returns CreateAuditLogInput.UserId, and is useful for accessing the field via an interface.
func (v *CreateAuditLogInput) GetUserId() *uuid.UUID { return v.UserId }

// GetEventType returns CreateAuditLogInput.EventType, and is useful for accessing the field via an interface.
func (v *CreateAuditLogInput) GetEventType() AuditEventType { return v.EventType }

// GetIpAddress returns CreateAuditLogInput.IpAddress, and is useful for accessing the field via an interface.
func (v *CreateAuditLogInput) GetIpAddress() *string { return v.IpAddress }

// GetUserAgent returns CreateAuditLogInput.UserAgent, and is useful for accessing the field via an interface.
func (v *CreateAuditLogInput) GetUserAgent() *string { return v.UserAgent }

// GetMetadata returns CreateAuditLogInput.Metadata, and is useful for accessing the field via an interface.
func (v *CreateAuditLogInput) GetMetadata() *string { return v.Metadata }

// CreateAuditLogResponse is returned by CreateAuditLog on success.
type CreateAuditLogResponse struct {
	CreateAuditLog CreateAuditLogCreateAuditLog `json:"createAuditLog"`
}

// GetCreateAuditLog returns CreateAuditLogResponse.CreateAuditLog, and is useful for accessing the field via an interface.
func (v *CreateAuditLogResponse) GetCreateAuditLog() CreateAuditLogCreateAuditLog {
	return v.CreateAuditLog
}

// CreateUserCreateUser includes the requested fields of the GraphQL type User.
type CreateUserCreateUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns CreateUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns CreateUserCreateUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns CreateUserCreateUser.Email, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetEmail() string { return v.Email }

// GetName returns CreateUserCreateUser.Name, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetName() *string { return v.Name }

// GetPicture returns CreateUserCreateUser.Picture, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetPicture() *string { return v.Picture }

// GetRole returns CreateUserCreateUser.Role, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns CreateUserCreateUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns CreateUserCreateUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

type CreateUserInput struct {
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             *UserRole `json:"role"`
}

// GetKratosIdentityId returns CreateUserInput.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetEmail() string { return v.Email }

// GetName returns CreateUserInput.Name, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetName() *string { return v.Name }

// GetPicture returns CreateUserInput.Picture, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetPicture() *string { return v.Picture }

// GetRole returns CreateUserInput.Role, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetRole() *UserRole { return v.Role }

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	CreateUser CreateUserCreateUser `json:"createUser"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() CreateUserCreateUser { return v.CreateUser }

// DeleteUserResponse is returned by DeleteUser on success.
type DeleteUserResponse struct {
	DeleteUser bool `json:"deleteUser"`
}

// GetDeleteUser returns DeleteUserResponse.DeleteUser, and is useful for accessing the field via an interface.
func (v *DeleteUserResponse) GetDeleteUser() bool { return v.DeleteUser }

// GetAuditLogAuditLog includes the requested fields of the GraphQL type AuditLog.
type GetAuditLogAuditLog struct {
	Id        uuid.UUID      `json:"id"`
	UserId    *uuid.UUID     `json:"userId"`
	EventType AuditEventType `json:"eventType"`
	IpAddress *string        `json:"ipAddress"`
	UserAgent *string        `json:"userAgent"`
	Metadata  *string        `json:"metadata"`
	CreatedAt time.Time      `json:"createdAt"`
}

// GetId returns GetAuditLogAuditLog.Id, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetId() uuid.UUID { return v.Id }

// GetUserId returns GetAuditLogAuditLog.UserId, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetUserId() *uuid.UUID { return v.UserId }

// GetEventType returns GetAuditLogAuditLog.EventType, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetEventType() AuditEventType { return v.EventType }

// GetIpAddress returns GetAuditLogAuditLog.IpAddress, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetIpAddress() *string { return v.IpAddress }

// GetUserAgent returns GetAuditLogAuditLog.UserAgent, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetUserAgent() *string { return v.UserAgent }

// GetMetadata returns GetAuditLogAuditLog.Metadata, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetMetadata() *string { return v.Metadata }

// GetCreatedAt returns GetAuditLogAuditLog.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAuditLogAuditLog) GetCreatedAt() time.Time { return v.CreatedAt }

// GetAuditLogResponse is returned by GetAuditLog on success.
type GetAuditLogResponse struct {
	AuditLog *GetAuditLogAuditLog `json:"auditLog"`
}

// GetAuditLog returns GetAuditLogResponse.AuditLog, and is useful for accessing the field via an interface.
func (v *GetAuditLogResponse) GetAuditLog() *GetAuditLogAuditLog { return v.AuditLog }

// GetUserByEmailResponse is returned by GetUserByEmail on success.
type GetUserByEmailResponse struct {
	UserByEmail *GetUserByEmailUserByEmailUser `json:"userByEmail"`
}

// GetUserByEmail returns GetUserByEmailResponse.UserByEmail, and is useful for accessing the field via an interface.
func (v *GetUserByEmailResponse) GetUserByEmail() *GetUserByEmailUserByEmailUser {
	return v.UserByEmail
}

// GetUserByEmailUserByEmailUser includes the requested fields of the GraphQL type User.
type GetUserByEmailUserByEmailUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns GetUserByEmailUserByEmailUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns GetUserByEmailUserByEmailUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns GetUserByEmailUserByEmailUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetEmail() string { return v.Email }

// GetName returns GetUserByEmailUserByEmailUser.Name, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetName() *string { return v.Name }

// GetPicture returns GetUserByEmailUserByEmailUser.Picture, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetPicture() *string { return v.Picture }

// GetRole returns GetUserByEmailUserByEmailUser.Role, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns GetUserByEmailUserByEmailUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns GetUserByEmailUserByEmailUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetUserByEmailUserByEmailUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUserByKratosIdResponse is returned by GetUserByKratosId on success.
type GetUserByKratosIdResponse struct {
	UserByKratosId *GetUserByKratosIdUserByKratosIdUser `json:"userByKratosId"`
}

// GetUserByKratosId returns GetUserByKratosIdResponse.UserByKratosId, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdResponse) GetUserByKratosId() *GetUserByKratosIdUserByKratosIdUser {
	return v.UserByKratosId
}

// GetUserByKratosIdUserByKratosIdUser includes the requested fields of the GraphQL type User.
type GetUserByKratosIdUserByKratosIdUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns GetUserByKratosIdUserByKratosIdUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns GetUserByKratosIdUserByKratosIdUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetKratosIdentityId() uuid.UUID {
	return v.KratosIdentityId
}

// GetEmail returns GetUserByKratosIdUserByKratosIdUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetEmail() string { return v.Email }

// GetName returns GetUserByKratosIdUserByKratosIdUser.Name, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetName() *string { return v.Name }

// GetPicture returns GetUserByKratosIdUserByKratosIdUser.Picture, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetPicture() *string { return v.Picture }

// GetRole returns GetUserByKratosIdUserByKratosIdUser.Role, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns GetUserByKratosIdUserByKratosIdUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns GetUserByKratosIdUserByKratosIdUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetUserByKratosIdUserByKratosIdUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	User *GetUserUser `json:"user"`
}

// GetUser returns GetUserResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetUser() *GetUserUser { return v.User }

// GetUserUser includes the requested fields of the GraphQL type User.
type GetUserUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns GetUserUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns GetUserUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns GetUserUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetEmail() string { return v.Email }

// GetName returns GetUserUser.Name, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetName() *string { return v.Name }

// GetPicture returns GetUserUser.Picture, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetPicture() *string { return v.Picture }

// GetRole returns GetUserUser.Role, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns GetUserUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns GetUserUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ListAuditLogsAuditLogsAuditLog includes the requested fields of the GraphQL type AuditLog.
type ListAuditLogsAuditLogsAuditLog struct {
	Id        uuid.UUID      `json:"id"`
	UserId    *uuid.UUID     `json:"userId"`
	EventType AuditEventType `json:"eventType"`
	IpAddress *string        `json:"ipAddress"`
	UserAgent *string        `json:"userAgent"`
	Metadata  *string        `json:"metadata"`
	CreatedAt time.Time      `json:"createdAt"`
}

// GetId returns ListAuditLogsAuditLogsAuditLog.Id, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetId() uuid.UUID { return v.Id }

// GetUserId returns ListAuditLogsAuditLogsAuditLog.UserId, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetUserId() *uuid.UUID { return v.UserId }

// GetEventType returns ListAuditLogsAuditLogsAuditLog.EventType, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetEventType() AuditEventType { return v.EventType }

// GetIpAddress returns ListAuditLogsAuditLogsAuditLog.IpAddress, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetIpAddress() *string { return v.IpAddress }

// GetUserAgent returns ListAuditLogsAuditLogsAuditLog.UserAgent, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetUserAgent() *string { return v.UserAgent }

// GetMetadata returns ListAuditLogsAuditLogsAuditLog.Metadata, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetMetadata() *string { return v.Metadata }

// GetCreatedAt returns ListAuditLogsAuditLogsAuditLog.CreatedAt, and is useful for accessing the field via an interface.
func (v *ListAuditLogsAuditLogsAuditLog) GetCreatedAt() time.Time { return v.CreatedAt }

// ListAuditLogsResponse is returned by ListAuditLogs on success.
type ListAuditLogsResponse struct {
	AuditLogs []ListAuditLogsAuditLogsAuditLog `json:"auditLogs"`
}

// GetAuditLogs returns ListAuditLogsResponse.AuditLogs, and is useful for accessing the field via an interface.
func (v *ListAuditLogsResponse) GetAuditLogs() []ListAuditLogsAuditLogsAuditLog { return v.AuditLogs }

// ListUsersByRoleResponse is returned by ListUsersByRole on success.
type ListUsersByRoleResponse struct {
	UsersByRole []ListUsersByRoleUsersByRoleUser `json:"usersByRole"`
}

// GetUsersByRole returns ListUsersByRoleResponse.UsersByRole, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleResponse) GetUsersByRole() []ListUsersByRoleUsersByRoleUser {
	return v.UsersByRole
}

// ListUsersByRoleUsersByRoleUser includes the requested fields of the GraphQL type User.
type ListUsersByRoleUsersByRoleUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns ListUsersByRoleUsersByRoleUser.Id, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns ListUsersByRoleUsersByRoleUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns ListUsersByRoleUsersByRoleUser.Email, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetEmail() string { return v.Email }

// GetName returns ListUsersByRoleUsersByRoleUser.Name, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetName() *string { return v.Name }

// GetPicture returns ListUsersByRoleUsersByRoleUser.Picture, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetPicture() *string { return v.Picture }

// GetRole returns ListUsersByRoleUsersByRoleUser.Role, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns ListUsersByRoleUsersByRoleUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ListUsersByRoleUsersByRoleUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ListUsersByRoleUsersByRoleUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ListUsersResponse is returned by ListUsers on success.
type ListUsersResponse struct {
	Users []ListUsersUsersUser `json:"users"`
}

// GetUsers returns ListUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *ListUsersResponse) GetUsers() []ListUsersUsersUser { return v.Users }

// ListUsersUsersUser includes the requested fields of the GraphQL type User.
type ListUsersUsersUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns ListUsersUsersUser.Id, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns ListUsersUsersUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns ListUsersUsersUser.Email, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetEmail() string { return v.Email }

// GetName returns ListUsersUsersUser.Name, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetName() *string { return v.Name }

// GetPicture returns ListUsersUsersUser.Picture, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetPicture() *string { return v.Picture }

// GetRole returns ListUsersUsersUser.Role, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns ListUsersUsersUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ListUsersUsersUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

type UpdateUserInput struct {
	Name    *string `json:"name"`
	Picture *string `json:"picture"`
}

// GetName returns UpdateUserInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetName() *string { return v.Name }

// GetPicture returns UpdateUserInput.Picture, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetPicture() *string { return v.Picture }

// UpdateUserResponse is returned by UpdateUser on success.
type UpdateUserResponse struct {
	UpdateUser UpdateUserUpdateUser `json:"updateUser"`
}

// GetUpdateUser returns UpdateUserResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *UpdateUserResponse) GetUpdateUser() UpdateUserUpdateUser { return v.UpdateUser }

type UpdateUserRoleInput struct {
	Role UserRole `json:"role"`
}

// GetRole returns UpdateUserRoleInput.Role, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleInput) GetRole() UserRole { return v.Role }

// UpdateUserRoleResponse is returned by UpdateUserRole on success.
type UpdateUserRoleResponse struct {
	UpdateUserRole UpdateUserRoleUpdateUserRoleUser `json:"updateUserRole"`
}

// GetUpdateUserRole returns UpdateUserRoleResponse.UpdateUserRole, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleResponse) GetUpdateUserRole() UpdateUserRoleUpdateUserRoleUser {
	return v.UpdateUserRole
}

// UpdateUserRoleUpdateUserRoleUser includes the requested fields of the GraphQL type User.
type UpdateUserRoleUpdateUserRoleUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns UpdateUserRoleUpdateUserRoleUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns UpdateUserRoleUpdateUserRoleUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns UpdateUserRoleUpdateUserRoleUser.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetEmail() string { return v.Email }

// GetName returns UpdateUserRoleUpdateUserRoleUser.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetName() *string { return v.Name }

// GetPicture returns UpdateUserRoleUpdateUserRoleUser.Picture, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetPicture() *string { return v.Picture }

// GetRole returns UpdateUserRoleUpdateUserRoleUser.Role, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns UpdateUserRoleUpdateUserRoleUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns UpdateUserRoleUpdateUserRoleUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateUserRoleUpdateUserRoleUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// UpdateUserUpdateUser includes the requested fields of the GraphQL type User.
type UpdateUserUpdateUser struct {
	Id               uuid.UUID `json:"id"`
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
	Email            string    `json:"email"`
	Name             *string   `json:"name"`
	Picture          *string   `json:"picture"`
	Role             UserRole  `json:"role"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// GetId returns UpdateUserUpdateUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetId() uuid.UUID { return v.Id }

// GetKratosIdentityId returns UpdateUserUpdateUser.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// GetEmail returns UpdateUserUpdateUser.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetEmail() string { return v.Email }

// GetName returns UpdateUserUpdateUser.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetName() *string { return v.Name }

// GetPicture returns UpdateUserUpdateUser.Picture, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetPicture() *string { return v.Picture }

// GetRole returns UpdateUserUpdateUser.Role, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetRole() UserRole { return v.Role }

// GetCreatedAt returns UpdateUserUpdateUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns UpdateUserUpdateUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

type UserRole string

const (
	UserRoleNone   UserRole = "NONE"
	UserRoleMember UserRole = "MEMBER"
	UserRoleAdmin  UserRole = "ADMIN"
)

var AllUserRole = []UserRole{
	UserRoleNone,
	UserRoleMember,
	UserRoleAdmin,
}

// __CountUsersByRoleInput is used internally by genqlient
type __CountUsersByRoleInput struct {
	Role UserRole `json:"role"`
}

// GetRole returns __CountUsersByRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__CountUsersByRoleInput) GetRole() UserRole { return v.Role }

// __CreateAuditLogInput is used internally by genqlient
type __CreateAuditLogInput struct {
	Input CreateAuditLogInput `json:"input"`
}

// GetInput returns __CreateAuditLogInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateAuditLogInput) GetInput() CreateAuditLogInput { return v.Input }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	Input CreateUserInput `json:"input"`
}

// GetInput returns __CreateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetInput() CreateUserInput { return v.Input }

// __DeleteUserInput is used internally by genqlient
type __DeleteUserInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __DeleteUserInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteUserInput) GetId() uuid.UUID { return v.Id }

// __GetAuditLogInput is used internally by genqlient
type __GetAuditLogInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetAuditLogInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAuditLogInput) GetId() uuid.UUID { return v.Id }

// __GetUserByEmailInput is used internally by genqlient
type __GetUserByEmailInput struct {
	Email string `json:"email"`
}

// GetEmail returns __GetUserByEmailInput.Email, and is useful for accessing the field via an interface.
func (v *__GetUserByEmailInput) GetEmail() string { return v.Email }

// __GetUserByKratosIdInput is used internally by genqlient
type __GetUserByKratosIdInput struct {
	KratosIdentityId uuid.UUID `json:"kratosIdentityId"`
}

// GetKratosIdentityId returns __GetUserByKratosIdInput.KratosIdentityId, and is useful for accessing the field via an interface.
func (v *__GetUserByKratosIdInput) GetKratosIdentityId() uuid.UUID { return v.KratosIdentityId }

// __GetUserInput is used internally by genqlient
type __GetUserInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetUserInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserInput) GetId() uuid.UUID { return v.Id }

// __ListAuditLogsInput is used internally by genqlient
type __ListAuditLogsInput struct {
	UserId    *uuid.UUID      `json:"userId"`
	EventType *AuditEventType `json:"eventType"`
	Limit     *int            `json:"limit"`
	Offset    *int            `json:"offset"`
}

// GetUserId returns __ListAuditLogsInput.UserId, and is useful for accessing the field via an interface.
func (v *__ListAuditLogsInput) GetUserId() *uuid.UUID { return v.UserId }

// GetEventType returns __ListAuditLogsInput.EventType, and is useful for accessing the field via an interface.
func (v *__ListAuditLogsInput) GetEventType() *AuditEventType { return v.EventType }

// GetLimit returns __ListAuditLogsInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListAuditLogsInput) GetLimit() *int { return v.Limit }

// GetOffset returns __ListAuditLogsInput.Offset, and is useful for accessing the field via an interface.
func (v *__ListAuditLogsInput) GetOffset() *int { return v.Offset }

// __ListUsersByRoleInput is used internally by genqlient
type __ListUsersByRoleInput struct {
	Role   UserRole `json:"role"`
	Limit  *int     `json:"limit"`
	Offset *int     `json:"offset"`
}

// GetRole returns __ListUsersByRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__ListUsersByRoleInput) GetRole() UserRole { return v.Role }

// GetLimit returns __ListUsersByRoleInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListUsersByRoleInput) GetLimit() *int { return v.Limit }

// GetOffset returns __ListUsersByRoleInput.Offset, and is useful for accessing the field via an interface.
func (v *__ListUsersByRoleInput) GetOffset() *int { return v.Offset }

// __ListUsersInput is used internally by genqlient
type __ListUsersInput struct {
	Limit  *int `json:"limit"`
	Offset *int `json:"offset"`
}

// GetLimit returns __ListUsersInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListUsersInput) GetLimit() *int { return v.Limit }

// GetOffset returns __ListUsersInput.Offset, and is useful for accessing the field via an interface.
func (v *__ListUsersInput) GetOffset() *int { return v.Offset }

// __UpdateUserInput is used internally by genqlient
type __UpdateUserInput struct {
	Id    uuid.UUID       `json:"id"`
	Input UpdateUserInput `json:"input"`
}

// GetId returns __UpdateUserInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __UpdateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetInput() UpdateUserInput { return v.Input }

// __UpdateUserRoleInput is used internally by genqlient
type __UpdateUserRoleInput struct {
	Id    uuid.UUID           `json:"id"`
	Input UpdateUserRoleInput `json:"input"`
}

// GetId returns __UpdateUserRoleInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateUserRoleInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __UpdateUserRoleInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateUserRoleInput) GetInput() UpdateUserRoleInput { return v.Input }

// The query executed by CountUsers.
const CountUsers_Operation = `
query CountUsers {
	countUsers
}
`

func CountUsers(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *CountUsersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CountUsers",
		Query:  CountUsers_Operation,
	}

	data_ = &CountUsersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by CountUsersByRole.
const CountUsersByRole_Operation = `
query CountUsersByRole ($role: UserRole!) {
	countUsersByRole(role: $role)
}
`

func CountUsersByRole(
	ctx_ context.Context,
	client_ graphql.Client,
	role UserRole,
) (data_ *CountUsersByRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CountUsersByRole",
		Query:  CountUsersByRole_Operation,
		Variables: &__CountUsersByRoleInput{
			Role: role,
		},
	}

	data_ = &CountUsersByRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateAuditLog.
const CreateAuditLog_Operation = `
mutation CreateAuditLog ($input: CreateAuditLogInput!) {
	createAuditLog(input: $input) {
		id
		userId
		eventType
		ipAddress
		userAgent
		metadata
		createdAt
	}
}
`

func CreateAuditLog(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateAuditLogInput,
) (data_ *CreateAuditLogResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateAuditLog",
		Query:  CreateAuditLog_Operation,
		Variables: &__CreateAuditLogInput{
			Input: input,
		},
	}

	data_ = &CreateAuditLogResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateUser.
const CreateUser_Operation = `
mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func CreateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateUserInput,
) (data_ *CreateUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateUser",
		Query:  CreateUser_Operation,
		Variables: &__CreateUserInput{
			Input: input,
		},
	}

	data_ = &CreateUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteUser.
const DeleteUser_Operation = `
mutation DeleteUser ($id: UUID!) {
	deleteUser(id: $id)
}
`

func DeleteUser(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (data_ *DeleteUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteUser",
		Query:  DeleteUser_Operation,
		Variables: &__DeleteUserInput{
			Id: id,
		},
	}

	data_ = &DeleteUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAuditLog.
const GetAuditLog_Operation = `
query GetAuditLog ($id: UUID!) {
	auditLog(id: $id) {
		id
		userId
		eventType
		ipAddress
		userAgent
		metadata
		createdAt
	}
}
`

func GetAuditLog(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (data_ *GetAuditLogResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAuditLog",
		Query:  GetAuditLog_Operation,
		Variables: &__GetAuditLogInput{
			Id: id,
		},
	}

	data_ = &GetAuditLogResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUser.
const GetUser_Operation = `
query GetUser ($id: UUID!) {
	user(id: $id) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func GetUser(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (data_ *GetUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUser",
		Query:  GetUser_Operation,
		Variables: &__GetUserInput{
			Id: id,
		},
	}

	data_ = &GetUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserByEmail.
const GetUserByEmail_Operation = `
query GetUserByEmail ($email: String!) {
	userByEmail(email: $email) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func GetUserByEmail(
	ctx_ context.Context,
	client_ graphql.Client,
	email string,
) (data_ *GetUserByEmailResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserByEmail",
		Query:  GetUserByEmail_Operation,
		Variables: &__GetUserByEmailInput{
			Email: email,
		},
	}

	data_ = &GetUserByEmailResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserByKratosId.
const GetUserByKratosId_Operation = `
query GetUserByKratosId ($kratosIdentityId: UUID!) {
	userByKratosId(kratosIdentityId: $kratosIdentityId) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func GetUserByKratosId(
	ctx_ context.Context,
	client_ graphql.Client,
	kratosIdentityId uuid.UUID,
) (data_ *GetUserByKratosIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserByKratosId",
		Query:  GetUserByKratosId_Operation,
		Variables: &__GetUserByKratosIdInput{
			KratosIdentityId: kratosIdentityId,
		},
	}

	data_ = &GetUserByKratosIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListAuditLogs.
const ListAuditLogs_Operation = `
query ListAuditLogs ($userId: UUID, $eventType: AuditEventType, $limit: Int, $offset: Int) {
	auditLogs(userId: $userId, eventType: $eventType, limit: $limit, offset: $offset) {
		id
		userId
		eventType
		ipAddress
		userAgent
		metadata
		createdAt
	}
}
`

func ListAuditLogs(
	ctx_ context.Context,
	client_ graphql.Client,
	userId *uuid.UUID,
	eventType *AuditEventType,
	limit *int,
	offset *int,
) (data_ *ListAuditLogsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListAuditLogs",
		Query:  ListAuditLogs_Operation,
		Variables: &__ListAuditLogsInput{
			UserId:    userId,
			EventType: eventType,
			Limit:     limit,
			Offset:    offset,
		},
	}

	data_ = &ListAuditLogsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListUsers.
const ListUsers_Operation = `
query ListUsers ($limit: Int, $offset: Int) {
	users(limit: $limit, offset: $offset) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func ListUsers(
	ctx_ context.Context,
	client_ graphql.Client,
	limit *int,
	offset *int,
) (data_ *ListUsersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListUsers",
		Query:  ListUsers_Operation,
		Variables: &__ListUsersInput{
			Limit:  limit,
			Offset: offset,
		},
	}

	data_ = &ListUsersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListUsersByRole.
const ListUsersByRole_Operation = `
query ListUsersByRole ($role: UserRole!, $limit: Int, $offset: Int) {
	usersByRole(role: $role, limit: $limit, offset: $offset) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func ListUsersByRole(
	ctx_ context.Context,
	client_ graphql.Client,
	role UserRole,
	limit *int,
	offset *int,
) (data_ *ListUsersByRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListUsersByRole",
		Query:  ListUsersByRole_Operation,
		Variables: &__ListUsersByRoleInput{
			Role:   role,
			Limit:  limit,
			Offset: offset,
		},
	}

	data_ = &ListUsersByRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateUser.
const UpdateUser_Operation = `
mutation UpdateUser ($id: UUID!, $input: UpdateUserInput!) {
	updateUser(id: $id, input: $input) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func UpdateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateUserInput,
) (data_ *UpdateUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateUser",
		Query:  UpdateUser_Operation,
		Variables: &__UpdateUserInput{
			Id:    id,
			Input: input,
		},
	}

	data_ = &UpdateUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateUserRole.
const UpdateUserRole_Operation = `
mutation UpdateUserRole ($id: UUID!, $input: UpdateUserRoleInput!) {
	updateUserRole(id: $id, input: $input) {
		id
		kratosIdentityId
		email
		name
		picture
		role
		createdAt
		updatedAt
	}
}
`

func UpdateUserRole(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateUserRoleInput,
) (data_ *UpdateUserRoleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateUserRole",
		Query:  UpdateUserRole_Operation,
		Variables: &__UpdateUserRoleInput{
			Id:    id,
			Input: input,
		},
	}

	data_ = &UpdateUserRoleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
