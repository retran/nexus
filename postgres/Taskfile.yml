# Copyright 2025 Andrew Vasilyev
# SPDX-License-Identifier: APACHE-2.0

version: "3"

vars:
  GREEN: \033[0;32m
  RED: \033[0;31m
  NC: \033[0m
  SCHEMA_PATH: "file:///app/schema.hcl"
  MIGRATIONS_PATH: "file:///app/migrations"
  POSTGRES_USER:
    sh: echo "${POSTGRES_USER:-admin}"
  POSTGRES_PASSWORD:
    sh: echo "${POSTGRES_PASSWORD:-SUPER_SECRET_PASSWORD}"
  POSTGRES_DB:
    sh: echo "${POSTGRES_DB:-nexus_db}"
  DB_URL: "postgres://{{.POSTGRES_USER}}:{{.POSTGRES_PASSWORD}}@postgres:5432/{{.POSTGRES_DB}}?sslmode=disable"
  DEV_DB_URL: "postgres://{{.POSTGRES_USER}}:{{.POSTGRES_PASSWORD}}@postgres:5432/{{.POSTGRES_DB}}_dev?sslmode=disable"

silent: true

tasks:
  default:
    desc: "Show available database tasks"
    cmds:
      - task --list-all

  deps:
    desc: "Install database tooling dependencies (e.g., for sqlfluff via yarn)"
    cmds:
      - |
        if [ -f "package.json" ]; then
          [ -d node_modules ] || yarn install
          printf "{{.GREEN}}[OK]{{.NC}} Database tooling dependencies installed\n"
        else
          printf "{{.GREEN}}[OK]{{.NC}} No package.json found, skipping dependency installation.\n"
        fi

  dev:ensure:
    desc: "Ensure dev database exists"
    cmds:
      - |
        docker-compose -f ../docker-compose.dev.yaml exec postgres psql -U ${POSTGRES_USER:-admin} -d postgres -c "CREATE DATABASE ${POSTGRES_DB:-nexus_db}_dev;" 2>/dev/null || true
        printf "{{.GREEN}}[OK]{{.NC}} Dev database ready\n"
    silent: true

  schema:fmt:
    desc: "Format schema.hcl file"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas schema fmt .
      - printf "{{.GREEN}}[OK]{{.NC}} Schema formatted\n"

  schema:lint:
    desc: "Lint schema file against potential issues"
    cmds:
      - task: dev:ensure
      - docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas schema lint --dev-url {{.DEV_DB_URL}} --latest 1
      - printf "{{.GREEN}}[OK]{{.NC}} Schema linted\n"

  schema:diff:
    desc: "Generate new migration from schema changes (use -- <name>)"
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          printf "{{.RED}}[ERROR]{{.NC}} Provide migration name: task schema:diff -- <name>\n"
          exit 1
        fi
      - task: dev:ensure
      - |
        docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas migrate diff {{.CLI_ARGS}} \
          --dir {{.MIGRATIONS_PATH}} \
          --to {{.SCHEMA_PATH}} \
          --dev-url {{.DEV_DB_URL}}
        printf "{{.GREEN}}[OK]{{.NC}} Migration '{{.CLI_ARGS}}' generated\n"
        printf "Running formatter on new migration file...\n"
      - task: lint:fix
      - task: migrate:hash

  migrate:new:
    desc: "Create new empty migration file (use -- <name>)"
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          printf "{{.RED}}[ERROR]{{.NC}} Provide migration name: task migrate:new -- <name>\n"
          exit 1
        fi
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        FILENAME="migrations/${TIMESTAMP}_{{.CLI_ARGS}}.sql"
        cat > "$FILENAME" << 'EOF'
        -- Copyright 2025 Andrew Vasilyev
        -- SPDX-License-Identifier: APACHE-2.0

        -- TODO: Add your migration SQL here

        EOF
        printf "{{.GREEN}}[OK]{{.NC}} Created migration file:\n"
        echo "   $FILENAME"
        printf "{{.YELLOW}}[NOTE]{{.NC}} Don't forget to run 'task migrate:hash' after editing\n"

  migrate:hash:
    desc: "Update migration hash file (atlas.sum)"
    cmds:
      - |
        docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas migrate hash --dir {{.MIGRATIONS_PATH}}
        printf "{{.GREEN}}[OK]{{.NC}} Migration hashes updated\n"

  migrate:status:
    desc: "Show migration status"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas migrate status --url {{.DB_URL}}

  migrate:apply:
    desc: "Apply all pending migrations to the database"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml --profile tools run --rm atlas migrate apply --url {{.DB_URL}}
      - printf "{{.GREEN}}[OK]{{.NC}} Migrations applied\n"

  schema:apply:
    desc: "Alias for migrate:apply"
    cmds:
      - task: migrate:apply

  lint:
    desc: "Lint SQL files (migrations and queries)"
    cmds:
      - yarn lint

  lint:fix:
    desc: "Lint and auto-fix SQL files"
    cmds:
      - yarn lint:fix

  format:
    desc: "Alias for lint:fix"
    cmds:
      - task: lint:fix

  format:check:
    desc: "Alias for lint"
    cmds:
      - task: lint

  shell:
    desc: "Open PostgreSQL shell"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml exec postgres psql -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-nexus_db}

  reset:
    desc: "Reset database (WARNING: destroys all data)"
    prompt: "This will delete all database data. Continue?"
    cmds:
      - docker-compose -f ../docker-compose.dev.yaml exec postgres psql -U ${POSTGRES_USER:-admin} -d postgres -c "DROP DATABASE IF EXISTS ${POSTGRES_DB:-nexus_db};"
      - docker-compose -f ../docker-compose.dev.yaml exec postgres psql -U ${POSTGRES_USER:-admin} -d postgres -c "CREATE DATABASE ${POSTGRES_DB:-nexus_db};"
      - task: migrate:apply
